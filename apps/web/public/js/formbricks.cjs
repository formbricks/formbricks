"use strict";let r=!1,o=!1;const i=[],e=async(e,...n)=>{if(console.log(n),o){if(window.formbricks){const r=e;await window.formbricks[r](...n)}}else if("init"===e){if(r)return void console.warn("ðŸ§± Formbricks - Warning: Formbricks is already initializing.");r=!0;const e=n[0].apiHost;if((await(async r=>{if(!window.formbricks){const i=await fetch(`${r}/api/packages/js`);if(!i.ok)return{ok:!1,error:new Error("Failed to load Formbricks SDK")};const e=await i.text(),n=document.createElement("script");n.innerHTML=e,document.head.appendChild(n);const t=async()=>new Promise(((r,o)=>{const i=setInterval((()=>{window.formbricks&&(clearInterval(i),r())}),100);setTimeout((()=>{clearInterval(i),o(new Error("Formbricks SDK loading timed out"))}),1e4)}));try{return await t(),{ok:!0,data:void 0}}catch(o){return{ok:!1,error:new Error(o.message??"Failed to load Formbricks SDK")}}}return{ok:!0,data:void 0}})(e)).ok&&window.formbricks){window.formbricks.init(...n),r=!1,o=!0;for(const{prop:r,args:o}of i)"function"==typeof window.formbricks[r]?window.formbricks[r](...o):console.error(`ðŸ§± Formbricks - Error: Method ${r} does not exist on formbricks`)}}else console.warn("ðŸ§± Formbricks - Warning: Formbricks not initialized. This method will be queued and executed after initialization."),i.push({prop:e,args:n})},n=new Proxy({},{get:(r,o,i)=>(...r)=>e(o,...r)});module.exports=n;
//# sourceMappingURL=index.cjs.map
