{"version":3,"file":"index.cjs","sources":["../src/lib/load-formbricks.ts","../src/index.ts"],"sourcesContent":["/*\n  eslint-disable no-console --\n  * Required for logging errors\n*/\nimport { type Result } from \"@formbricks/types/error-handlers\";\n\nlet isInitializing = false;\nlet isInitialized = false;\n\n// Load the SDK, return the result\nconst loadFormbricksSDK = async (apiHostParam: string): Promise<Result<void>> => {\n  if (!window.formbricks) {\n    const res = await fetch(`${apiHostParam}/api/packages/js`);\n\n    // Failed to fetch the app package\n    if (!res.ok) {\n      return { ok: false, error: new Error(`Failed to load Formbricks SDK`) };\n    }\n\n    const sdkScript = await res.text();\n    const scriptTag = document.createElement(\"script\");\n    scriptTag.innerHTML = sdkScript;\n    document.head.appendChild(scriptTag);\n\n    const getFormbricks = async (): Promise<void> =>\n      new Promise<void>((resolve, reject) => {\n        const checkInterval = setInterval(() => {\n          if (window.formbricks) {\n            clearInterval(checkInterval);\n            resolve();\n          }\n        }, 100);\n\n        setTimeout(() => {\n          clearInterval(checkInterval);\n          reject(new Error(`Formbricks SDK loading timed out`));\n        }, 10000);\n      });\n\n    try {\n      await getFormbricks();\n      return { ok: true, data: undefined };\n    } catch (error) {\n      const err = error as { message?: string };\n\n      return {\n        ok: false,\n        error: new Error(err.message ?? `Failed to load Formbricks SDK`),\n      };\n    }\n  }\n\n  return { ok: true, data: undefined };\n};\n\nconst functionsToProcess: { prop: string; args: unknown[] }[] = [];\n\nexport const loadFormbricksToProxy = async (prop: string, ...args: unknown[]): Promise<void> => {\n  console.log(args);\n  // all of this should happen when not initialized:\n  if (!isInitialized) {\n    if (prop === \"init\") {\n      if (isInitializing) {\n        console.warn(\"ðŸ§± Formbricks - Warning: Formbricks is already initializing.\");\n        return;\n      }\n\n      // reset the initialization state\n      isInitializing = true;\n\n      const apiHost = (args[0] as { apiHost: string }).apiHost;\n      const loadSDKResult = await loadFormbricksSDK(apiHost);\n\n      if (loadSDKResult.ok) {\n        if (window.formbricks) {\n          // @ts-expect-error -- Required for dynamic function calls\n          void window.formbricks.init(...args);\n\n          isInitializing = false;\n          isInitialized = true;\n\n          // process the queued functions\n          for (const { prop: functionProp, args: functionArgs } of functionsToProcess) {\n            type FormbricksProp = keyof typeof window.formbricks;\n\n            if (typeof window.formbricks[functionProp as FormbricksProp] !== \"function\") {\n              console.error(`ðŸ§± Formbricks - Error: Method ${functionProp} does not exist on formbricks`);\n              continue;\n            }\n\n            // @ts-expect-error -- Required for dynamic function calls\n            (window.formbricks[functionProp] as unknown)(...functionArgs);\n          }\n        }\n      }\n    } else {\n      console.warn(\n        \"ðŸ§± Formbricks - Warning: Formbricks not initialized. This method will be queued and executed after initialization.\"\n      );\n\n      functionsToProcess.push({ prop, args });\n    }\n  } else if (window.formbricks) {\n    type Formbricks = typeof window.formbricks;\n    type FunctionProp = keyof Formbricks;\n    const functionPropTyped = prop as FunctionProp;\n\n    // @ts-expect-error -- Required for dynamic function calls\n    await window.formbricks[functionPropTyped](...args);\n  }\n};\n"," \nimport { type TFormbricksApp } from \"@formbricks/js-core\";\nimport { loadFormbricksToProxy } from \"./lib/load-formbricks\";\n\ndeclare global {\n  interface Window {\n    formbricks: TFormbricksApp | undefined;\n  }\n}\n\nconst formbricksProxyHandler: ProxyHandler<TFormbricksApp> = {\n  get(_target, prop, _receiver) {\n    return (...args: unknown[]) => loadFormbricksToProxy(prop as string, ...args);\n  },\n};\n\nconst formbricksApp: TFormbricksApp = new Proxy({} as TFormbricksApp, formbricksProxyHandler);\n\n// eslint-disable-next-line import/no-default-export -- Required for UMD\nexport default formbricksApp;\n"],"names":["isInitializing","isInitialized","functionsToProcess","loadFormbricksToProxy","async","prop","args","console","log","window","formbricks","functionPropTyped","warn","apiHost","apiHostParam","res","fetch","ok","error","Error","sdkScript","text","scriptTag","document","createElement","innerHTML","head","appendChild","getFormbricks","Promise","resolve","reject","checkInterval","setInterval","clearInterval","setTimeout","data","message","loadFormbricksSDK","init","functionProp","functionArgs","push","formbricksApp","Proxy","get","_target","_receiver"],"mappings":"aAMA,IAAIA,GAAiB,EACjBC,GAAgB,EAGpB,MA6CMC,EAA0D,GAEnDC,EAAwBC,MAAOC,KAAiBC,KAG3D,GAFAC,QAAQC,IAAIF,GAEPL,GAyCH,GACSQ,OAAOC,WAAY,CAG5B,MAAMC,EAAoBN,QAGpBI,OAAOC,WAAWC,MAAsBL,EAChD,OAhDE,GAAa,SAATD,EAAiB,CACnB,GAAIL,EAEF,YADAO,QAAQK,KAAK,gEAKEZ,GAAA,EAEX,MAAAa,EAAWP,EAAK,GAA2BO,QAGjD,SA/DoBT,OAAOU,IAC3B,IAACL,OAAOC,WAAY,CACtB,MAAMK,QAAYC,MAAM,GAAGF,qBAGvB,IAACC,EAAIE,GACP,MAAO,CAAEA,IAAI,EAAOC,MAAO,IAAIC,MAAM,kCAGjC,MAAAC,QAAkBL,EAAIM,OACtBC,EAAYC,SAASC,cAAc,UACzCF,EAAUG,UAAYL,EACbG,SAAAG,KAAKC,YAAYL,GAE1B,MAAMM,EAAgBxB,SACpB,IAAIyB,SAAc,CAACC,EAASC,KACpB,MAAAC,EAAgBC,aAAY,KAC5BxB,OAAOC,aACTwB,cAAcF,OAEhB,GACC,KAEHG,YAAW,KACTD,cAAcF,GACPD,EAAA,IAAIZ,MAAM,oCAAmC,GACnD,IAAK,IAGR,IAEF,aADMS,IACC,CAAEX,IAAI,EAAMmB,UAAM,SAClBlB,GAGA,MAAA,CACLD,IAAI,EACJC,MAAO,IAAIC,MAJDD,EAIWmB,SAAW,iCAEpC,CACF,CAEA,MAAO,CAAEpB,IAAI,EAAMmB,UAAM,EAAU,EAmBHE,CAAkBzB,IAE5BI,IACZR,OAAOC,WAAY,CAEhBD,OAAOC,WAAW6B,QAAQjC,GAEdN,GAAA,EACDC,GAAA,EAGhB,IAAA,MAAaI,KAAMmC,EAAclC,KAAMmC,KAAkBvC,EAGU,mBAAtDO,OAAOC,WAAW8B,GAM5B/B,OAAOC,WAAW8B,MAA6BC,GALtClC,QAAAW,MAAM,iCAAiCsB,iCAOrD,CACF,MAEQjC,QAAAK,KACN,sHAGFV,EAAmBwC,KAAK,CAAErC,OAAMC,QASpC,EC7FIqC,EAAgC,IAAIC,MAAM,CAAA,EANa,CAC3DC,IAAA,CAAIC,EAASzC,EAAM0C,IACV,IAAIzC,IAAoBH,EAAsBE,KAAmBC"}