{"version":3,"file":"index.js","sources":["../src/lib/load-formbricks.ts","../src/index.ts"],"sourcesContent":["/*\n  eslint-disable no-console --\n  * Required for logging errors\n*/\nimport { type Result } from \"@formbricks/types/error-handlers\";\n\nlet isInitializing = false;\nlet isInitialized = false;\n\n// Load the SDK, return the result\nconst loadFormbricksSDK = async (apiHostParam: string): Promise<Result<void>> => {\n  if (!window.formbricks) {\n    const res = await fetch(`${apiHostParam}/api/packages/js`);\n\n    // Failed to fetch the app package\n    if (!res.ok) {\n      return { ok: false, error: new Error(`Failed to load Formbricks SDK`) };\n    }\n\n    const sdkScript = await res.text();\n    const scriptTag = document.createElement(\"script\");\n    scriptTag.innerHTML = sdkScript;\n    document.head.appendChild(scriptTag);\n\n    const getFormbricks = async (): Promise<void> =>\n      new Promise<void>((resolve, reject) => {\n        const checkInterval = setInterval(() => {\n          if (window.formbricks) {\n            clearInterval(checkInterval);\n            resolve();\n          }\n        }, 100);\n\n        setTimeout(() => {\n          clearInterval(checkInterval);\n          reject(new Error(`Formbricks SDK loading timed out`));\n        }, 10000);\n      });\n\n    try {\n      await getFormbricks();\n      return { ok: true, data: undefined };\n    } catch (error) {\n      const err = error as { message?: string };\n\n      return {\n        ok: false,\n        error: new Error(err.message ?? `Failed to load Formbricks SDK`),\n      };\n    }\n  }\n\n  return { ok: true, data: undefined };\n};\n\nconst functionsToProcess: { prop: string; args: unknown[] }[] = [];\n\nexport const loadFormbricksToProxy = async (prop: string, ...args: unknown[]): Promise<void> => {\n  console.log(args);\n  // all of this should happen when not initialized:\n  if (!isInitialized) {\n    if (prop === \"init\") {\n      if (isInitializing) {\n        console.warn(\"ðŸ§± Formbricks - Warning: Formbricks is already initializing.\");\n        return;\n      }\n\n      // reset the initialization state\n      isInitializing = true;\n\n      const apiHost = (args[0] as { apiHost: string }).apiHost;\n      const loadSDKResult = await loadFormbricksSDK(apiHost);\n\n      if (loadSDKResult.ok) {\n        if (window.formbricks) {\n          // @ts-expect-error -- Required for dynamic function calls\n          void window.formbricks.init(...args);\n\n          isInitializing = false;\n          isInitialized = true;\n\n          // process the queued functions\n          for (const { prop: functionProp, args: functionArgs } of functionsToProcess) {\n            type FormbricksProp = keyof typeof window.formbricks;\n\n            if (typeof window.formbricks[functionProp as FormbricksProp] !== \"function\") {\n              console.error(`ðŸ§± Formbricks - Error: Method ${functionProp} does not exist on formbricks`);\n              continue;\n            }\n\n            // @ts-expect-error -- Required for dynamic function calls\n            (window.formbricks[functionProp] as unknown)(...functionArgs);\n          }\n        }\n      }\n    } else {\n      console.warn(\n        \"ðŸ§± Formbricks - Warning: Formbricks not initialized. This method will be queued and executed after initialization.\"\n      );\n\n      functionsToProcess.push({ prop, args });\n    }\n  } else if (window.formbricks) {\n    type Formbricks = typeof window.formbricks;\n    type FunctionProp = keyof Formbricks;\n    const functionPropTyped = prop as FunctionProp;\n\n    // @ts-expect-error -- Required for dynamic function calls\n    await window.formbricks[functionPropTyped](...args);\n  }\n};\n"," \nimport { type TFormbricksApp } from \"@formbricks/js-core\";\nimport { loadFormbricksToProxy } from \"./lib/load-formbricks\";\n\ndeclare global {\n  interface Window {\n    formbricks: TFormbricksApp | undefined;\n  }\n}\n\nconst formbricksProxyHandler: ProxyHandler<TFormbricksApp> = {\n  get(_target, prop, _receiver) {\n    return (...args: unknown[]) => loadFormbricksToProxy(prop as string, ...args);\n  },\n};\n\nconst formbricksApp: TFormbricksApp = new Proxy({} as TFormbricksApp, formbricksProxyHandler);\n\n// eslint-disable-next-line import/no-default-export -- Required for UMD\nexport default formbricksApp;\n"],"names":[],"mappings":"AAMA,IAAI,iBAAiB;AACrB,IAAI,gBAAgB;AAGpB,MAAM,oBAAoB,OAAO,iBAAgD;AAC3E,MAAA,CAAC,OAAO,YAAY;AACtB,UAAM,MAAM,MAAM,MAAM,GAAG,YAAY,kBAAkB;AAGrD,QAAA,CAAC,IAAI,IAAI;AACX,aAAO,EAAE,IAAI,OAAO,OAAO,IAAI,MAAM,+BAA+B;IACtE;AAEM,UAAA,YAAY,MAAM,IAAI;AACtB,UAAA,YAAY,SAAS,cAAc,QAAQ;AACjD,cAAU,YAAY;AACb,aAAA,KAAK,YAAY,SAAS;AAEnC,UAAM,gBAAgB,YACpB,IAAI,QAAc,CAAC,SAAS,WAAW;AAC/B,YAAA,gBAAgB,YAAY,MAAM;AACtC,YAAI,OAAO,YAAY;AACrB,wBAAc,aAAa;AACnB;QACV;AAAA,SACC,GAAG;AAEN,iBAAW,MAAM;AACf,sBAAc,aAAa;AACpB,eAAA,IAAI,MAAM,kCAAkC,CAAC;AAAA,SACnD,GAAK;AAAA,IAAA,CACT;AAEC,QAAA;AACF,YAAM,cAAc;AACpB,aAAO,EAAE,IAAI,MAAM,MAAM,OAAU;AAAA,aAC5B,OAAO;AACd,YAAM,MAAM;AAEL,aAAA;AAAA,QACL,IAAI;AAAA,QACJ,OAAO,IAAI,MAAM,IAAI,WAAW,+BAA+B;AAAA,MAAA;AAAA,IAEnE;AAAA,EACF;AAEA,SAAO,EAAE,IAAI,MAAM,MAAM,OAAU;AACrC;AAEA,MAAM,qBAA0D,CAAA;AAEnD,MAAA,wBAAwB,OAAO,SAAiB,SAAmC;AAC9F,UAAQ,IAAI,IAAI;AAEhB,MAAI,CAAC,eAAe;AAClB,QAAI,SAAS,QAAQ;AACnB,UAAI,gBAAgB;AAClB,gBAAQ,KAAK,8DAA8D;AAC3E;AAAA,MACF;AAGiB,uBAAA;AAEX,YAAA,UAAW,KAAK,CAAC,EAA0B;AAC3C,YAAA,gBAAgB,MAAM,kBAAkB,OAAO;AAErD,UAAI,cAAc,IAAI;AACpB,YAAI,OAAO,YAAY;AAErB,eAAK,OAAO,WAAW,KAAK,GAAG,IAAI;AAElB,2BAAA;AACD,0BAAA;AAGhB,qBAAW,EAAE,MAAM,cAAc,MAAM,kBAAkB,oBAAoB;AAG3E,gBAAI,OAAO,OAAO,WAAW,YAA8B,MAAM,YAAY;AACnE,sBAAA,MAAM,iCAAiC,YAAY,+BAA+B;AAC1F;AAAA,YACF;AAGC,mBAAO,WAAW,YAAY,EAAc,GAAG,YAAY;AAAA,UAC9D;AAAA,QACF;AAAA,MACF;AAAA,IAAA,OACK;AACG,cAAA;AAAA,QACN;AAAA,MAAA;AAGF,yBAAmB,KAAK,EAAE,MAAM,KAAM,CAAA;AAAA,IACxC;AAAA,EAAA,WACS,OAAO,YAAY;AAG5B,UAAM,oBAAoB;AAG1B,UAAM,OAAO,WAAW,iBAAiB,EAAE,GAAG,IAAI;AAAA,EACpD;AACF;ACpGA,MAAM,yBAAuD;AAAA,EAC3D,IAAI,SAAS,MAAM,WAAW;AAC5B,WAAO,IAAI,SAAoB,sBAAsB,MAAgB,GAAG,IAAI;AAAA,EAC9E;AACF;AAEA,MAAM,gBAAgC,IAAI,MAAM,CAAA,GAAsB,sBAAsB;"}