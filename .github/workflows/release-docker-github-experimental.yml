name: Docker Release to Github Experimental

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

on:
  workflow_dispatch:

env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  # github.repository as <account>/<repo>
  IMAGE_NAME: ${{ github.repository }}-experimental
  TURBO_TOKEN: ${{ secrets.TURBO_TOKEN }}
  TURBO_TEAM: ${{ secrets.TURBO_TEAM }}

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      # This is used to complete the identity challenge
      # with sigstore/fulcio when running outside of PRs.
      id-token: write

    outputs:
      DOCKER_IMAGE: ${{ steps.extract_image_info.outputs.DOCKER_IMAGE }}
      RELEASE_VERSION: ${{ steps.extract_image_info.outputs.RELEASE_VERSION }}

    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@0634a2670c59f64b4a01f0f96f84700a4088b9f0 # v2.12.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Generate SemVer version from branch or tag
        id: generate_version
        run: |
          # Get reference name and type
          REF_NAME="${{ github.ref_name }}"
          REF_TYPE="${{ github.ref_type }}"

          echo "Reference type: $REF_TYPE"
          echo "Reference name: $REF_NAME"

          if [[ "$REF_TYPE" == "tag" ]]; then
            # If running from a tag, use the tag name
            if [[ "$REF_NAME" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+.*$ ]]; then
              # Tag looks like a SemVer, use it directly (remove 'v' prefix if present)
              VERSION=$(echo "$REF_NAME" | sed 's/^v//')
              echo "Using SemVer tag: $VERSION"
            else
              # Tag is not SemVer, treat as prerelease
              SANITIZED_TAG=$(echo "$REF_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              VERSION="0.0.0-$SANITIZED_TAG"
              echo "Using tag as prerelease: $VERSION"
            fi
          else
            # Running from branch, use branch name as prerelease
            SANITIZED_BRANCH=$(echo "$REF_NAME" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
            VERSION="0.0.0-$SANITIZED_BRANCH"
            echo "Using branch as prerelease: $VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "Generated SemVer version: $VERSION"

      - name: Update package.json version
        env:
          VERSION: ${{ env.VERSION }}
        run: |
          cd ./apps/web
          npm version $VERSION --no-git-tag-version
          echo "Updated version to: $(npm pkg get version)"

      - name: Set Sentry environment in .env
        run: |
          if ! grep -q "^SENTRY_ENVIRONMENT=staging$" .env 2>/dev/null; then
            echo "SENTRY_ENVIRONMENT=staging" >> .env
            echo "Added SENTRY_ENVIRONMENT=staging to .env file"
          else
            echo "SENTRY_ENVIRONMENT=staging already exists in .env file"
          fi

      - name: Set up Depot CLI
        uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5 # v1.6.0

      # Install the cosign tool except on PR
      # https://github.com/sigstore/cosign-installer
      - name: Install cosign
        if: github.event_name != 'pull_request'
        uses: sigstore/cosign-installer@3454372f43399081ed03b604cb2d021dabca52bb # v3.8.2

      # Login against a Docker registry except on PR
      # https://github.com/docker/login-action
      - name: Log into registry ${{ env.REGISTRY }}
        if: github.event_name != 'pull_request'
        uses: docker/login-action@74a5d142397b4f367a81961eba4e8cd7edddf772 # v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # Extract metadata (tags, labels) for Docker
      # https://github.com/docker/metadata-action
      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@902fa8ec7d6ecbf8d84d538b9b233a880e428804 # v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      # Build and push Docker image with Buildx (don't push on PR)
      # https://github.com/docker/build-push-action
      - name: Build and push Docker image
        id: build-and-push
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          project: tw0fqmsx3c
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          context: .
          file: ./apps/web/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          secrets: |
            database_url=${{ secrets.DUMMY_DATABASE_URL }}
            encryption_key=${{ secrets.DUMMY_ENCRYPTION_KEY }}

      - name: Extract image info for sourcemap upload
        id: extract_image_info
        run: |
          # Use the first readable tag from metadata action output
          DOCKER_IMAGE=$(echo "${{ steps.meta.outputs.tags }}" | head -n1 | xargs)
          echo "DOCKER_IMAGE=$DOCKER_IMAGE" >> $GITHUB_OUTPUT

          # Use the generated version for Sentry release
          RELEASE_VERSION="$VERSION"
          echo "RELEASE_VERSION=$RELEASE_VERSION" >> $GITHUB_OUTPUT

          echo "Docker image: $DOCKER_IMAGE"
          echo "Release version: $RELEASE_VERSION"
          echo "Available tags: ${{ steps.meta.outputs.tags }}"

      # Sign the resulting Docker image digest except on PRs.
      # This will only write to the public Rekor transparency log when the Docker
      # repository is public to avoid leaking data.  If you would like to publish
      # transparency data even for private images, pass --force to cosign below.
      # https://github.com/sigstore/cosign
      - name: Sign the published Docker image
        if: ${{ github.event_name != 'pull_request' }}
        env:
          # https://docs.github.com/en/actions/security-guides/security-hardening-for-github-actions#using-an-intermediate-environment-variable
          TAGS: ${{ steps.meta.outputs.tags }}
          DIGEST: ${{ steps.build-and-push.outputs.digest }}
        # This step uses the identity token to provision an ephemeral certificate
        # against the sigstore community Fulcio instance.
        run: echo "${TAGS}" | xargs -I {} cosign sign --yes {}@${DIGEST}

  upload-sentry-sourcemaps:
    name: Upload Sentry Sourcemaps
    runs-on: ubuntu-latest
    permissions:
      contents: read
    needs:
      - build
    steps:
      - name: Checkout
        uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      - name: Upload Sentry Sourcemaps
        uses: ./.github/actions/upload-sentry-sourcemaps
        continue-on-error: true
        with:
          docker_image: ${{ needs.build.outputs.DOCKER_IMAGE }}
          release_version: ${{ needs.build.outputs.RELEASE_VERSION }}
          sentry_auth_token: ${{ secrets.SENTRY_AUTH_TOKEN }}
          environment: staging
