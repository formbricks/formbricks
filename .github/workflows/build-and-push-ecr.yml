name: Build & Push Docker to ECR

# This workflow builds Formbricks Docker images for ECR deployment:
# - workflow_call: Used by releases with explicit SemVer versions
# - workflow_dispatch: Auto-detects version from current branch or uses override

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: "Override version (SemVer only, e.g., 1.2.3). Leave empty to auto-detect from branch."
        required: false
        type: string
      deploy_production:
        description: "Tag image for production deployment"
        required: false
        default: false
        type: boolean
      deploy_staging:
        description: "Tag image for staging deployment"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      image_tag:
        description: "Image tag to push (required for workflow_call)"
        required: true
        type: string
      IS_PRERELEASE:
        description: "Whether this is a prerelease (auto-tags for staging/production)"
        required: false
        type: boolean
        default: false
    outputs:
      IMAGE_TAG:
        description: "Normalized image tag used for the build"
        value: ${{ jobs.build-and-push.outputs.IMAGE_TAG }}
      TAGS:
        description: "Newline-separated list of ECR tags pushed"
        value: ${{ jobs.build-and-push.outputs.tags }}

permissions:
  contents: read
  id-token: write

env:
  ECR_REGION: ${{ vars.ECR_REGION }}
  # ECR settings are sourced from repository/environment variables for portability across envs/forks
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  DOCKERFILE: apps/web/Dockerfile
  CONTEXT: .

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      IMAGE_TAG: ${{ steps.version.outputs.version }}
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Resolve Docker version
        id: version
        uses: ./.github/actions/resolve-docker-version
        with:
          event_name: ${{ github.event_name }}
          version_override: ${{ inputs.version_override }}
          workflow_call_tag: ${{ inputs.image_tag }}
          current_branch: ${{ github.ref_name }}

      - name: Validate required variables
        shell: bash
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_REGION: ${{ env.ECR_REGION }}
        run: |
          set -euo pipefail
          if [[ -z "${ECR_REGISTRY}" || -z "${ECR_REPOSITORY}" || -z "${ECR_REGION}" ]]; then
            echo "ECR_REGION, ECR_REGISTRY and ECR_REPOSITORY must be set via repository or environment variables (Settings → Variables)."
            exit 1
          fi

      - name: Update package.json version
        uses: ./.github/actions/update-package-version
        with:
          version: ${{ steps.version.outputs.version }}

      - name: Build tag list
        id: tags
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.version.outputs.version }}
          DEPLOY_PRODUCTION: ${{ inputs.deploy_production }}
          DEPLOY_STAGING: ${{ inputs.deploy_staging }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          set -euo pipefail

          # Start with the base image tag
          TAGS="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          # Handle automatic tagging for workflow_call (releases)
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            if [[ "${IS_PRERELEASE}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:staging"
              echo "Adding staging tag for prerelease"
            else
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:production"
              echo "Adding production tag for stable release"
            fi
          fi

          # Handle manual tagging for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Add production tag if requested
            if [[ "${DEPLOY_PRODUCTION}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:production"
              echo "Adding production tag (manual)"
            fi

            # Add staging tag if requested
            if [[ "${DEPLOY_STAGING}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:staging"
              echo "Adding staging tag (manual)"
            fi
          fi

          # Output for debugging
          echo "Generated tags:"
          echo -e "${TAGS}"

          # Set output for next step (escape newlines for GitHub Actions)
          {
            echo "tags<<EOF"
            echo -e "${TAGS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.2.0
        with:
          role-to-assume: ${{ secrets.AWS_ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Set up Docker build tools
        uses: ./.github/actions/docker-build-setup
        with:
          setup_cosign: "false" # ECR builds don't need cosign
          skip_login_on_pr: "true"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push Docker image
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          project: tw0fqmsx3c
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          secrets: |
            database_url=${{ secrets.DUMMY_DATABASE_URL }}
            encryption_key=${{ secrets.DUMMY_ENCRYPTION_KEY }}
            sentry_auth_token=${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Output build summary
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.version.outputs.version }}
          VERSION_SOURCE: ${{ steps.version.outputs.source }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          DEPLOY_PRODUCTION: ${{ inputs.deploy_production }}
          DEPLOY_STAGING: ${{ inputs.deploy_staging }}
          TAGS: ${{ steps.tags.outputs.tags }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "✅ Successfully built and pushed Formbricks Docker image to ECR"
          echo "Event: ${EVENT_NAME}"
          echo "Image Tag: ${IMAGE_TAG} (source: ${VERSION_SOURCE})"
          if [[ "${EVENT_NAME}" == "workflow_call" ]]; then
            echo "Prerelease: ${IS_PRERELEASE}"
          else
            echo "Manual Production Deploy: ${DEPLOY_PRODUCTION}"
            echo "Manual Staging Deploy: ${DEPLOY_STAGING}"
          fi
          echo "Tags:"
          echo -e "${TAGS}"
