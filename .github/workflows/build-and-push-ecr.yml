name: Build & Push Docker to ECR

# This workflow builds Formbricks Docker images for ECR deployment:
# - workflow_call: Used by releases with explicit SemVer versions
# - workflow_dispatch: Auto-detects version from current branch or uses override

on:
  workflow_dispatch:
    inputs:
      version_override:
        description: "Override version (SemVer only, e.g., 1.2.3). Leave empty to auto-detect from branch."
        required: false
        type: string
      deploy_production:
        description: "Tag image for production deployment"
        required: false
        default: false
        type: boolean
      deploy_staging:
        description: "Tag image for staging deployment"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      image_tag:
        description: "Image tag to push (required for workflow_call)"
        required: true
        type: string
      IS_PRERELEASE:
        description: "Whether this is a prerelease (auto-tags for staging/production)"
        required: false
        type: boolean
        default: false
    outputs:
      IMAGE_TAG:
        description: "Normalized image tag used for the build"
        value: ${{ jobs.build-and-push.outputs.IMAGE_TAG }}
      TAGS:
        description: "Newline-separated list of ECR tags pushed"
        value: ${{ jobs.build-and-push.outputs.tags }}

permissions:
  contents: read
  id-token: write

env:
  ECR_REGION: ${{ vars.ECR_REGION }}
  # ECR settings are sourced from repository/environment variables for portability across envs/forks
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  DOCKERFILE: apps/web/Dockerfile
  CONTEXT: .

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 45
    outputs:
      IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
      tags: ${{ steps.tags.outputs.tags }}
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Determine and validate image tag
        id: image_tag
        shell: bash
        env:
          VERSION_OVERRIDE: ${{ inputs.version_override }}
          WORKFLOW_CALL_TAG: ${{ inputs.image_tag }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          CURRENT_BRANCH: ${{ github.ref_name }}
        run: |
          set -euo pipefail

          # For workflow_call (releases), use provided image_tag
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            if [[ -z "${WORKFLOW_CALL_TAG}" ]]; then
              echo "‚ùå Error: image_tag input is required for workflow_call"
              exit 1
            fi
            
            TAG="${WORKFLOW_CALL_TAG}"
            
            # Validate the tag format (uppercase will be normalized to lowercase)
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
              echo "‚ùå Error: Invalid release tag format. Must be semver (e.g., 1.2.3, 1.2.3-alpha)"
              echo "Provided tag: $TAG"
              exit 1
            fi
            
            # Normalize to lowercase for Docker/ECR compatibility
            IMAGE_TAG="${TAG,,}"
            echo "üéØ Using release version (normalized to lowercase): $IMAGE_TAG"
            if [[ "$TAG" != "$IMAGE_TAG" ]]; then
              echo "‚ÑπÔ∏è  Original tag contained uppercase characters, normalized: $TAG ‚Üí $IMAGE_TAG"
            fi
          else
            # For workflow_dispatch, determine version from override or branch
            if [[ -n "${VERSION_OVERRIDE}" ]]; then
              # User provided explicit SemVer override
              if [[ ! "${VERSION_OVERRIDE}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
                echo "‚ùå Error: version_override must be valid SemVer (e.g., 1.2.3, 1.2.3-alpha)"
                echo "Provided: ${VERSION_OVERRIDE}"
                exit 1
              fi
              IMAGE_TAG="${VERSION_OVERRIDE}"
              echo "üéØ Using explicit version override: ${IMAGE_TAG}"
            else
              # Auto-detect from current branch
              echo "üîç Auto-detecting version from branch: ${CURRENT_BRANCH}"
              TIMESTAMP=$(date +%s)
              SANITIZED_BRANCH=$(echo "${CURRENT_BRANCH}" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
              
              # Generate semantic version based on branch pattern
              if [[ "${CURRENT_BRANCH}" == "main" ]]; then
                # Main branch - development towards next release
                IMAGE_TAG="0.0.0-dev-${TIMESTAMP}"
                echo "üöÄ Main branch detected ‚Üí development version: ${IMAGE_TAG}"
              elif [[ "${CURRENT_BRANCH}" =~ ^(feature|feat)/ ]]; then
                # Feature branch - experimental feature
                IMAGE_TAG="0.0.0-alpha-${SANITIZED_BRANCH}-${TIMESTAMP}"
                echo "üß™ Feature branch detected ‚Üí alpha version: ${IMAGE_TAG}"
              elif [[ "${CURRENT_BRANCH}" =~ ^(hotfix|fix)/ ]]; then
                # Hotfix branch - urgent fix
                IMAGE_TAG="0.0.0-hotfix-${SANITIZED_BRANCH}-${TIMESTAMP}"
                echo "üî• Hotfix branch detected ‚Üí hotfix version: ${IMAGE_TAG}"
              elif [[ "${CURRENT_BRANCH}" =~ ^(release|rel)/ ]]; then
                # Release branch - release candidate
                IMAGE_TAG="0.0.0-rc-${SANITIZED_BRANCH}-${TIMESTAMP}"
                echo "üì¶ Release branch detected ‚Üí release candidate version: ${IMAGE_TAG}"
              else
                # Generic branch - experimental
                IMAGE_TAG="0.0.0-alpha-${SANITIZED_BRANCH}-${TIMESTAMP}"
                echo "üî¨ Generic branch detected ‚Üí experimental version: ${IMAGE_TAG}"
              fi
            fi
          fi

          # Validate image tag
          if [[ -z "${IMAGE_TAG}" ]]; then
            echo "‚ùå Image tag is required (non-empty)."
            exit 1
          fi
          if (( ${#IMAGE_TAG} > 128 )); then
            echo "‚ùå Image tag must be at most 128 characters."
            exit 1
          fi

          # All IMAGE_TAGs are now guaranteed to be valid SemVer format
          if [[ ! "${IMAGE_TAG}" =~ ^[a-z0-9._-]+$ ]]; then
            echo "‚ùå Image tag may only contain lowercase letters, digits, '.', '_' and '-'."
            exit 1
          fi

          if [[ "${IMAGE_TAG}" =~ ^[.-] || "${IMAGE_TAG}" =~ [.-]$ ]]; then
            echo "‚ùå Image tag must not start or end with '.' or '-'."
            exit 1
          fi

          echo "‚úÖ Valid image tag: ${IMAGE_TAG}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Validate required variables
        shell: bash
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_REGION: ${{ env.ECR_REGION }}
        run: |
          set -euo pipefail
          if [[ -z "${ECR_REGISTRY}" || -z "${ECR_REPOSITORY}" || -z "${ECR_REGION}" ]]; then
            echo "ECR_REGION, ECR_REGISTRY and ECR_REPOSITORY must be set via repository or environment variables (Settings ‚Üí Variables)."
            exit 1
          fi

      - name: Update package.json version
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
        run: |
          set -euo pipefail

          # IMAGE_TAG is now guaranteed to be valid SemVer for all build types
          VERSION="${IMAGE_TAG}"

          echo "Updating package.json version to: ${VERSION}"

          # Use jq to safely update the version field
          jq --arg version "${VERSION}" '.version = $version' ./apps/web/package.json > ./apps/web/package.json.tmp
          mv ./apps/web/package.json.tmp ./apps/web/package.json

          # Verify the update was successful
          UPDATED_VERSION=$(jq -r '.version' ./apps/web/package.json)

          if [[ "${UPDATED_VERSION}" != "${VERSION}" ]]; then
            echo "‚ùå Version update failed!"
            echo "Expected: ${VERSION}"
            echo "Actual: ${UPDATED_VERSION}"
            exit 1
          fi

          echo "‚úÖ Successfully updated package.json version to: ${UPDATED_VERSION}"

      - name: Build tag list
        id: tags
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
          DEPLOY_PRODUCTION: ${{ inputs.deploy_production }}
          DEPLOY_STAGING: ${{ inputs.deploy_staging }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          set -euo pipefail

          # Start with the base image tag
          TAGS="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          # Handle automatic tagging for workflow_call (releases)
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            if [[ "${IS_PRERELEASE}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:staging"
              echo "Adding staging tag for prerelease"
            else
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:production"
              echo "Adding production tag for stable release"
            fi
          fi

          # Handle manual tagging for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Add production tag if requested
            if [[ "${DEPLOY_PRODUCTION}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:production"
              echo "Adding production tag (manual)"
            fi

            # Add staging tag if requested
            if [[ "${DEPLOY_STAGING}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:staging"
              echo "Adding staging tag (manual)"
            fi
          fi

          # Output for debugging
          echo "Generated tags:"
          echo -e "${TAGS}"

          # Set output for next step (escape newlines for GitHub Actions)
          {
            echo "tags<<EOF"
            echo -e "${TAGS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a # v4.2.0
        with:
          role-to-assume: ${{ secrets.AWS_ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076 # v2.0.1

      - name: Set up Depot CLI
        uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5 # v1.6.0

      - name: Build and push Docker image
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          project: tw0fqmsx3c
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          secrets: |
            database_url=${{ secrets.DUMMY_DATABASE_URL }}
            encryption_key=${{ secrets.DUMMY_ENCRYPTION_KEY }}
            sentry_auth_token=${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Output build summary
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          DEPLOY_PRODUCTION: ${{ inputs.deploy_production }}
          DEPLOY_STAGING: ${{ inputs.deploy_staging }}
          TAGS: ${{ steps.tags.outputs.tags }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "‚úÖ Successfully built and pushed Formbricks Docker image to ECR"
          echo "Event: ${EVENT_NAME}"
          echo "Image Tag: ${IMAGE_TAG}"
          if [[ "${EVENT_NAME}" == "workflow_call" ]]; then
            echo "Prerelease: ${IS_PRERELEASE}"
          else
            echo "Manual Production Deploy: ${DEPLOY_PRODUCTION}"
            echo "Manual Staging Deploy: ${DEPLOY_STAGING}"
          fi
          echo "Tags:"
          echo -e "${TAGS}"
