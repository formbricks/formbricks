name: Build & Push Docker to ECR

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to push (e.g., v3.16.1, main, feature-branch)"
        required: true
        default: "v3.16.1"
      deploy_production:
        description: "Tag image for production deployment"
        required: false
        default: false
        type: boolean
      deploy_staging:
        description: "Tag image for staging deployment"
        required: false
        default: false
        type: boolean
  workflow_call:
    inputs:
      image_tag:
        description: "Image tag to push (required for workflow_call)"
        required: false
        type: string
      IS_PRERELEASE:
        description: "Whether this is a prerelease (auto-tags for staging/production)"
        required: false
        type: boolean
        default: false
      deploy_production:
        description: "Tag image for production deployment"
        required: false
        type: boolean
        default: false
      deploy_staging:
        description: "Tag image for staging deployment"
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  id-token: write

env:
  ECR_REGION: ${{ vars.ECR_REGION }}
  # ECR settings are sourced from repository/environment variables for portability across envs/forks
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  DOCKERFILE: apps/web/Dockerfile
  CONTEXT: .

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Determine and validate image tag
        id: image_tag
        shell: bash
        env:
          MANUAL_TAG: ${{ inputs.image_tag }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
        run: |
          set -euo pipefail

          # For workflow_call, extract version from git ref if not provided
          if [[ "${{ github.event_name }}" == "workflow_call" && -z "${MANUAL_TAG}" ]]; then
            # Extract version from tag (e.g., refs/tags/v1.2.3 -> 1.2.3)
            TAG="$GITHUB_REF"
            TAG=${TAG#refs/tags/v}
            
            # Validate the extracted tag format
            if [[ ! "$TAG" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
              echo "❌ Error: Invalid release tag format after extraction. Must be semver (e.g., 1.2.3, 1.2.3-alpha)"
              echo "Original ref: $GITHUB_REF"
              echo "Extracted tag: $TAG"
              exit 1
            fi
            
            IMAGE_TAG="$TAG"
            echo "Using tag-based version: $IMAGE_TAG"
          else
            IMAGE_TAG="${MANUAL_TAG}"
          fi

          # Validate image tag
          if [[ -z "${IMAGE_TAG}" ]]; then
            echo "❌ Image tag is required (non-empty)."
            exit 1
          fi
          if (( ${#IMAGE_TAG} > 128 )); then
            echo "❌ Image tag must be at most 128 characters."
            exit 1
          fi

          # For manual workflow_dispatch, allow more flexible tag formats (including branch names)
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            if [[ ! "${IMAGE_TAG}" =~ ^[a-zA-Z0-9._/-]+$ ]]; then
              echo "❌ Image tag may only contain letters, digits, '.', '_', '/' and '-'."
              exit 1
            fi
          else
            # For workflow_call (releases), enforce stricter validation
            if [[ ! "${IMAGE_TAG}" =~ ^[a-z0-9._-]+$ ]]; then
              echo "❌ Image tag may only contain lowercase letters, digits, '.', '_' and '-'."
              exit 1
            fi
          fi

          if [[ "${IMAGE_TAG}" =~ ^[.-] || "${IMAGE_TAG}" =~ [.-]$ ]]; then
            echo "❌ Image tag must not start or end with '.' or '-'."
            exit 1
          fi

          echo "✅ Valid image tag: ${IMAGE_TAG}"
          echo "IMAGE_TAG=${IMAGE_TAG}" >> $GITHUB_OUTPUT

      - name: Validate required variables
        shell: bash
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_REGION: ${{ env.ECR_REGION }}
        run: |
          set -euo pipefail
          if [[ -z "${ECR_REGISTRY}" || -z "${ECR_REPOSITORY}" || -z "${ECR_REGION}" ]]; then
            echo "ECR_REGION, ECR_REGISTRY and ECR_REPOSITORY must be set via repository or environment variables (Settings → Variables)."
            exit 1
          fi

      - name: Update package.json version
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
        run: |
          set -euo pipefail

          # Remove 'v' prefix if present (e.g., v3.16.1 -> 3.16.1)
          VERSION="${IMAGE_TAG#v}"

          # Only validate SemVer format for workflow_call (releases)
          if [[ "${{ github.event_name }}" == "workflow_call" ]]; then
            if [[ ! "${VERSION}" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?(\+[a-zA-Z0-9.-]+)?$ ]]; then
              echo "❌ Error: Invalid version format after extraction. Must be SemVer (e.g., 1.2.3, 1.2.3-alpha, 1.2.3+build.1)"
              echo "Original input: ${IMAGE_TAG}"
              echo "Extracted version: ${VERSION}"
              echo "Expected format: MAJOR.MINOR.PATCH[-PRERELEASE][+BUILDMETADATA]"
              exit 1
            fi
            echo "✅ Valid SemVer format detected: ${VERSION}"
          else
            echo "✅ Using experimental/branch version: ${VERSION}"
          fi

          echo "Updating package.json version to: ${VERSION}"
          sed -i "s/\"version\": \"0.0.0\"/\"version\": \"${VERSION}\"/" ./apps/web/package.json
          cat ./apps/web/package.json | grep version

      - name: Build tag list
        id: tags
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
          DEPLOY_PRODUCTION: ${{ inputs.deploy_production }}
          DEPLOY_STAGING: ${{ inputs.deploy_staging }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
        run: |
          set -euo pipefail

          # Start with the base image tag
          TAGS="${ECR_REGISTRY}/${ECR_REPOSITORY}:${IMAGE_TAG}"

          # Handle automatic tagging for workflow_call (releases)
          if [[ "${{ github.event_name }}" == "workflow_call" && "${IS_PRERELEASE}" != "" ]]; then
            if [[ "${IS_PRERELEASE}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:staging"
              echo "Adding staging tag for prerelease"
            else
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:production"
              echo "Adding production tag for stable release"
            fi
          fi

          # Handle manual tagging for workflow_dispatch
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Add production tag if requested
            if [[ "${DEPLOY_PRODUCTION}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:production"
              echo "Adding production tag (manual)"
            fi

            # Add staging tag if requested
            if [[ "${DEPLOY_STAGING}" == "true" ]]; then
              TAGS="${TAGS}\n${ECR_REGISTRY}/${ECR_REPOSITORY}:staging"
              echo "Adding staging tag (manual)"
            fi
          fi

          # Output for debugging
          echo "Generated tags:"
          echo -e "${TAGS}"

          # Set output for next step (escape newlines for GitHub Actions)
          {
            echo "tags<<EOF"
            echo -e "${TAGS}"
            echo "EOF"
          } >> "${GITHUB_OUTPUT}"

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ secrets.AWS_ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076

      - name: Set up Depot CLI
        uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5 # v1.6.0

      - name: Build and push Docker image
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          project: tw0fqmsx3c
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.tags.outputs.tags }}
          secrets: |
            database_url=${{ secrets.DUMMY_DATABASE_URL }}
            encryption_key=${{ secrets.DUMMY_ENCRYPTION_KEY }}
            sentry_auth_token=${{ secrets.SENTRY_AUTH_TOKEN }}

      - name: Output build summary
        shell: bash
        env:
          IMAGE_TAG: ${{ steps.image_tag.outputs.IMAGE_TAG }}
          IS_PRERELEASE: ${{ inputs.IS_PRERELEASE }}
          DEPLOY_PRODUCTION: ${{ inputs.deploy_production }}
          DEPLOY_STAGING: ${{ inputs.deploy_staging }}
          TAGS: ${{ steps.tags.outputs.tags }}
          EVENT_NAME: ${{ github.event_name }}
        run: |
          echo "✅ Successfully built and pushed Formbricks Docker image to ECR"
          echo "Event: ${EVENT_NAME}"
          echo "Image Tag: ${IMAGE_TAG}"
          if [[ "${EVENT_NAME}" == "workflow_call" ]]; then
            echo "Prerelease: ${IS_PRERELEASE}"
          else
            echo "Manual Production Deploy: ${DEPLOY_PRODUCTION}"
            echo "Manual Staging Deploy: ${DEPLOY_STAGING}"
          fi
          echo "Tags:"
          echo -e "${TAGS}"
