name: Build & Push Docker to ECR

on:
  workflow_dispatch:
    inputs:
      image_tag:
        description: "Image tag to push (e.g., v3.16.1)"
        required: true
        default: "v3.16.1"

permissions:
  contents: read
  id-token: write

env:
  ECR_REGION: ${{ vars.ECR_REGION }}
  # ECR settings are sourced from repository/environment variables for portability across envs/forks
  ECR_REGISTRY: ${{ vars.ECR_REGISTRY }}
  ECR_REPOSITORY: ${{ vars.ECR_REPOSITORY }}
  DOCKERFILE: apps/web/Dockerfile
  CONTEXT: .

jobs:
  build-and-push:
    name: Build and Push
    runs-on: ubuntu-latest
    timeout-minutes: 45
    steps:
      - name: Harden the runner (Audit all outbound calls)
        uses: step-security/harden-runner@ec9f2d5744a09debf3a187a3f4f675c53b671911 # v2.13.0
        with:
          egress-policy: audit

      - name: Checkout repository
        uses: actions/checkout@11bd71901bbe5b1630ceea73d27597364c9af683 # v4.2.2

      - name: Validate image tag input
        shell: bash
        env:
          IMAGE_TAG: ${{ inputs.image_tag }}
        run: |
          set -euo pipefail
          if [[ -z "${IMAGE_TAG}" ]]; then
            echo "❌ Image tag is required (non-empty)."
            exit 1
          fi
          if (( ${#IMAGE_TAG} > 128 )); then
            echo "❌ Image tag must be at most 128 characters."
            exit 1
          fi
          if [[ ! "${IMAGE_TAG}" =~ ^[a-z0-9._-]+$ ]]; then
            echo "❌ Image tag may only contain lowercase letters, digits, '.', '_' and '-'."
            exit 1
          fi
          if [[ "${IMAGE_TAG}" =~ ^[.-] || "${IMAGE_TAG}" =~ [.-]$ ]]; then
            echo "❌ Image tag must not start or end with '.' or '-'."
            exit 1
          fi

      - name: Validate required variables
        shell: bash
        env:
          ECR_REGISTRY: ${{ env.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ env.ECR_REPOSITORY }}
          ECR_REGION: ${{ env.ECR_REGION }}
        run: |
          set -euo pipefail
          if [[ -z "${ECR_REGISTRY}" || -z "${ECR_REPOSITORY}" || -z "${ECR_REGION}" ]]; then
            echo "ECR_REGION, ECR_REGISTRY and ECR_REPOSITORY must be set via repository or environment variables (Settings → Variables)."
            exit 1
          fi

      - name: Configure AWS credentials (OIDC)
        uses: aws-actions/configure-aws-credentials@7474bc4690e29a8392af63c5b98e7449536d5c3a
        with:
          role-to-assume: ${{ secrets.AWS_ECR_PUSH_ROLE_ARN }}
          aws-region: ${{ env.ECR_REGION }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@062b18b96a7aff071d4dc91bc00c4c1a7945b076

      - name: Set up Depot CLI
        uses: depot/setup-action@b0b1ea4f69e92ebf5dea3f8713a1b0c37b2126a5 # v1.6.0

      - name: Build and push image (Depot remote builder)
        uses: depot/build-push-action@636daae76684e38c301daa0c5eca1c095b24e780 # v1.14.0
        with:
          project: tw0fqmsx3c
          token: ${{ secrets.DEPOT_PROJECT_TOKEN }}
          context: ${{ env.CONTEXT }}
          file: ${{ env.DOCKERFILE }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:${{ inputs.image_tag }}
            ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          secrets: |
            database_url=${{ secrets.DUMMY_DATABASE_URL }}
            encryption_key=${{ secrets.DUMMY_ENCRYPTION_KEY }}
