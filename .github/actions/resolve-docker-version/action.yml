name: Resolve Docker Version
description: Resolves and validates Docker-compatible SemVer versions for container builds

inputs:
  event_name:
    description: "GitHub event name (workflow_call or workflow_dispatch)"
    required: true
  version_override:
    description: "Explicit version override (SemVer only, e.g., 1.2.3-beta)"
    required: false
  workflow_call_tag:
    description: "Version from workflow_call (required for releases)"
    required: false
  current_branch:
    description: "Current branch name for auto-detection"
    required: true

outputs:
  version:
    description: "Resolved Docker-compatible SemVer version"
    value: ${{ steps.resolve.outputs.version }}
  source:
    description: "Source of version (release|override|branch)"
    value: ${{ steps.resolve.outputs.source }}
  normalized:
    description: "Whether the version was normalized (true/false)"
    value: ${{ steps.resolve.outputs.normalized }}

runs:
  using: "composite"
  steps:
    - name: Resolve and validate Docker version
      id: resolve
      shell: bash
      env:
        EVENT_NAME: ${{ inputs.event_name }}
        VERSION_OVERRIDE: ${{ inputs.version_override }}
        WORKFLOW_CALL_TAG: ${{ inputs.workflow_call_tag }}
        CURRENT_BRANCH: ${{ inputs.current_branch }}
      run: |
        set -euo pipefail

        # Function to validate SemVer format (Docker-compatible, no '+' build metadata)
        validate_semver() {
          local version="$1"
          local context="$2"
          
          if [[ ! "$version" =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
            echo "❌ Error: Invalid $context format. Must be semver without build metadata (e.g., 1.2.3, 1.2.3-alpha)"
            echo "Provided: $version"
            echo "Note: Docker tags cannot contain '+' characters. Use prerelease identifiers instead."
            exit 1
          fi
        }

        # Function to generate branch-based version
        generate_branch_version() {
          local branch="$1"
          local timestamp=$(date +%s)
          # Sanitize branch name for Docker compatibility
          local sanitized_branch=$(echo "$branch" | sed 's/[^a-zA-Z0-9.-]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g')
          
          # Additional safety: truncate if too long (reserve space for prefix and timestamp)
          if (( ${#sanitized_branch} > 80 )); then
            sanitized_branch="${sanitized_branch:0:80}"
            echo "ℹ️  Branch name truncated for Docker compatibility" >&2
          fi
          local version
          
          if [[ "$branch" == "main" ]]; then
            version="0.0.0-dev-$timestamp"
            echo "🚀 Main branch detected → development version: $version" >&2
          elif [[ "$branch" =~ ^(feature|feat)/ ]]; then
            version="0.0.0-alpha-$sanitized_branch-$timestamp"
            echo "🧪 Feature branch detected → alpha version: $version" >&2
          elif [[ "$branch" =~ ^(hotfix|fix)/ ]]; then
            version="0.0.0-hotfix-$sanitized_branch-$timestamp"
            echo "🔥 Hotfix branch detected → hotfix version: $version" >&2
          elif [[ "$branch" =~ ^(release|rel)/ ]]; then
            version="0.0.0-rc-$sanitized_branch-$timestamp"
            echo "📦 Release branch detected → release candidate version: $version" >&2
          else
            version="0.0.0-alpha-$sanitized_branch-$timestamp"
            echo "🔬 Generic branch detected → experimental version: $version" >&2
          fi
          
          echo "$version"
        }

        # Input validation
        if [[ -z "$EVENT_NAME" ]]; then
          echo "❌ Error: event_name input is required"
          exit 1
        fi

        if [[ "$EVENT_NAME" != "workflow_call" && "$EVENT_NAME" != "workflow_dispatch" ]]; then
          echo "❌ Error: event_name must be 'workflow_call' or 'workflow_dispatch'"
          echo "Provided: $EVENT_NAME"
          exit 1
        fi

        if [[ -z "$CURRENT_BRANCH" ]]; then
          echo "❌ Error: current_branch input is required"
          exit 1
        fi

        # Main resolution logic
        NORMALIZED="false"

        if [[ "$EVENT_NAME" == "workflow_call" ]]; then
          # Release workflow - use provided tag
          if [[ -z "$WORKFLOW_CALL_TAG" ]]; then
            echo "❌ Error: workflow_call_tag input is required for workflow_call events"
            exit 1
          fi
          
          validate_semver "$WORKFLOW_CALL_TAG" "release tag"
          
          # Normalize to lowercase for Docker/ECR compatibility
          RESOLVED_VERSION="${WORKFLOW_CALL_TAG,,}"
          if [[ "$WORKFLOW_CALL_TAG" != "$RESOLVED_VERSION" ]]; then
            NORMALIZED="true"
            echo "ℹ️  Original tag contained uppercase characters, normalized: $WORKFLOW_CALL_TAG → $RESOLVED_VERSION"
          fi
          
          SOURCE="release"
          echo "🎯 Using release version: $RESOLVED_VERSION"
          
        else
          # Manual workflow_dispatch
          if [[ -n "$VERSION_OVERRIDE" ]]; then
            # User provided explicit override
            validate_semver "$VERSION_OVERRIDE" "version override"
            RESOLVED_VERSION="$VERSION_OVERRIDE"
            SOURCE="override"
            echo "🎯 Using explicit version override: $RESOLVED_VERSION"
          else
            # Auto-detect from branch
            echo "🔍 Auto-detecting version from branch: $CURRENT_BRANCH"
            RESOLVED_VERSION=$(generate_branch_version "$CURRENT_BRANCH")
            SOURCE="branch"
            echo "Generated version: $RESOLVED_VERSION"
          fi
        fi

        # Final validation - ensure result is valid Docker tag
        if [[ -z "$RESOLVED_VERSION" ]]; then
          echo "❌ Error: Failed to resolve version"
          exit 1
        fi

        if (( ${#RESOLVED_VERSION} > 128 )); then
          echo "❌ Error: Version must be at most 128 characters (Docker limitation)"
          echo "Generated version: $RESOLVED_VERSION (${#RESOLVED_VERSION} chars)"
          exit 1
        fi

        if [[ ! "$RESOLVED_VERSION" =~ ^[a-z0-9._-]+$ ]]; then
          echo "❌ Error: Version contains invalid characters for Docker tags"
          echo "Version: $RESOLVED_VERSION"
          exit 1
        fi

        if [[ "$RESOLVED_VERSION" =~ ^[.-] || "$RESOLVED_VERSION" =~ [.-]$ ]]; then
          echo "❌ Error: Version must not start or end with '.' or '-'"
          echo "Version: $RESOLVED_VERSION"
          exit 1
        fi

        # Output results
        echo "✅ Resolved Docker version: $RESOLVED_VERSION (source: $SOURCE)"
        echo "version=$RESOLVED_VERSION" >> $GITHUB_OUTPUT
        echo "source=$SOURCE" >> $GITHUB_OUTPUT
        echo "normalized=$NORMALIZED" >> $GITHUB_OUTPUT
