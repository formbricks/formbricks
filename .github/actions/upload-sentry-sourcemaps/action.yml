name: "Upload Sentry Sourcemaps"
description: "Extract sourcemaps from Docker image and upload to Sentry"

inputs:
  docker_image:
    description: "Docker image to extract sourcemaps from"
    required: true
  release_version:
    description: "Sentry release version (e.g., v1.2.3)"
    required: true
  sentry_auth_token:
    description: "Sentry authentication token"
    required: true
  environment:
    description: "Sentry environment (e.g., production, staging)"
    required: false
    default: "staging"

runs:
  using: "composite"
  steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Extract sourcemaps from Docker image
      shell: bash
      env:
        DOCKER_IMAGE: ${{ inputs.docker_image }}
      run: |
        set -euo pipefail

        # Validate docker image format (basic validation)
        if [[ ! "$DOCKER_IMAGE" =~ ^[a-zA-Z0-9._/-]+:[a-zA-Z0-9._-]+$ ]] && [[ ! "$DOCKER_IMAGE" =~ ^[a-zA-Z0-9._/-]+@sha256:[A-Fa-f0-9]{64}$ ]]; then
          echo "‚ùå Error: Invalid docker image format. Must be in format 'image:tag' or 'image@sha256:hash'"
          echo "Provided: ${DOCKER_IMAGE}"
          exit 1
        fi

        echo "üì¶ Extracting sourcemaps from Docker image: ${DOCKER_IMAGE}"

        # Create temporary container from the image and capture its ID
        echo "Creating temporary container..."
        CONTAINER_ID=$(docker create "$DOCKER_IMAGE")
        echo "Container created with ID: ${CONTAINER_ID}"

        # Set up cleanup function to ensure container is removed on script exit
        cleanup_container() {
          # Capture the current exit code to preserve it
          local original_exit_code=$?
          
          echo "üßπ Cleaning up Docker container..."
          
          # Remove the container if it exists (ignore errors if already removed)
          if [ -n "$CONTAINER_ID" ]; then
            docker rm -f "$CONTAINER_ID" 2>/dev/null || true
            echo "Container ${CONTAINER_ID} removed"
          fi
          
          # Exit with the original exit code to preserve script success/failure status
          exit $original_exit_code
        }

        # Register cleanup function to run on script exit (success or failure)
        trap cleanup_container EXIT

        # Extract .next directory containing sourcemaps
        docker cp "$CONTAINER_ID:/home/nextjs/apps/web/.next" ./extracted-next

        # Verify sourcemaps exist
        if [ ! -d "./extracted-next/static/chunks" ]; then
          echo "‚ùå Error: .next/static/chunks directory not found in Docker image"
          echo "Expected structure: /home/nextjs/apps/web/.next/static/chunks/"
          exit 1
        fi

        sourcemap_count=$(find ./extracted-next/static/chunks -name "*.map" | wc -l)
        echo "‚úÖ Found ${sourcemap_count} sourcemap files"

        if [ "$sourcemap_count" -eq 0 ]; then
          echo "‚ùå Error: No sourcemap files found. Check that productionBrowserSourceMaps is enabled."
          exit 1
        fi

    - name: Create Sentry release and upload sourcemaps
      uses: getsentry/action-release@v3
      env:
        SENTRY_AUTH_TOKEN: ${{ inputs.sentry_auth_token }}
        SENTRY_ORG: formbricks
        SENTRY_PROJECT: formbricks-cloud
      with:
        environment: ${{ inputs.environment }}
        version: ${{ inputs.release_version }}
        sourcemaps: "./extracted-next/"

    - name: Clean up extracted files
      shell: bash
      if: always()
      run: |
        set -euo pipefail
        # Clean up extracted files
        rm -rf ./extracted-next
        echo "üßπ Cleaned up extracted files"
